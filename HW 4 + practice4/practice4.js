// -створити класс попелюшка з полями ім'я, вік, розмір ноги
// --Створити 10 попелюшок , покласти їх в масив
// --Сторити об'єкт класу "принц" за допомоги класу який має поля ім'я, вік, туфелька яку він знайшов.
// -- за допоиоги циклу знайти яка попелюшка повинна бути з принцом
// class Cinderella {
//   constructor(name, age, footSize) {
//     this.name = name;
//     this.age = age;
//     this.footSize = footSize;
//   }
// }

// const cinderellas = [
//   new Cinderella('firstCindy', 18, 33),
//   new Cinderella('secondCindy', 19, 39),
//   new Cinderella('thirdCindy', 20, 36),
//   new Cinderella('Karina', 15, 32),
//   new Cinderella('fourthCindy', 24, 38),
//   new Cinderella('fifthCindy', 19, 35),
//   new Cinderella('sixthCindy', 28, 33),
//   new Cinderella('seventhCindy', 17, 33),
//   new Cinderella('eighthCindy', 18, 34),
// ]
// console.log(cinderellas);

// class Prince {
//   constructor(name, age, shoeSize) {
//     this.name = name;
//     this.age = age;
//     this.shoeSize = shoeSize;
//   }
// }

// const prince = new Prince('PrinceI', 25, 33);


// for (let cindy of cinderellas) {
//   if (cindy.footSize === prince.shoeSize && cindy.age < prince.age) {
//     console.log(cindy);
//   } 
// }


// -створити функцію конструктор попелюшка з полями ім'я, вік, розмір ноги
// --Створити 10 попелюшок , покласти їх в масив
// --Сторити об'єкт типу "принц" за допомоги функції конструктора з полями ім'я, вік, туфелька яку він знайшов, та функцію "пошук попелюшки"
// -- функція повинна приймати масив попелюшок, та шукає ту котра йому підходить
function Cinderella(name, age, footSize) {
  this.name = name;
  this.age = age;
  this.footSize = footSize;
}

const cinderellas = [
  new Cinderella('firstCindy', 18, 33),
  new Cinderella('secondCindy', 19, 39),
  new Cinderella('thirdCindy', 20, 36),
  new Cinderella('Karina', 15, 32),
  new Cinderella('fourthCindy', 24, 38),
  new Cinderella('fifthCindy', 19, 35),
  new Cinderella('sixthCindy', 28, 33),
  new Cinderella('seventhCindy', 17, 33),
  new Cinderella('eighthCindy', 18, 34),
]
console.log(cinderellas);

function Prince(name, age, shoeSize) {
  this.name = name;
  this.age = age;
  this.shoeSize = shoeSize;

  //   this.findCindy = function (cindysArr, prince) {
  //     for (let cindy of cindysArr) {
  //       if (cindy.footSize === prince.shoeSize && cindy.age < prince.age) {
  //         console.log(cindy);
  //         break;
  //       }
  //     }
  //   }
  // }

  this.findCindy = (cindys) => cindys.find(cindy => 
    cindy.footSize === this.shoeSize && cindy.age < this.age);
}


const princ = new Prince('Harry', 26, 33);
let foundCindy = princ.findCindy(cinderellas);
console.log(foundCindy);


// -  Створити функцію конструктор для об'єкту який описує теги
// Властивості
//  -назва тегу
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru

//  Таким чином описати теги
//  -a
//  -div
//  -h1
//  -span
//  -input
//  -form
//  -option
//  -select
//  Приклад результуючого об'єкту
//    {
//         titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//         attrs: [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//         {/*some props and values*/},
//         {/*...*/},
//         {/*...*/},
//         ]

//    }


// function Tag(titleOfTag, action, attributes = []) {
//   this.titleOfTag = titleOfTag;
//   this.action = action;
//   this.attributes = attributes;

// }

// function Attribute(titleOfAttr, actionOfAttr) {
//   this.titleOfAttr = titleOfAttr;
//   this.actionOfAttr = actionOfAttr;
// }

// const tags = [
//   new Tag('a', 'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки',
//     [new Attribute('accesskey', 'Активация ссылки с помощью комбинации клавиш.'),
//     new Attribute('download', 'Предлагает скачать указанный по ссылке файл.')]),
//   new Tag('div', 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.', [
//     new Attribute('align', 'Задает выравнивание содержимого тега <div>.'),
//     new Attribute('title', 'Добавляет всплывающую подсказку к содержимому.')
//   ]),
//   new Tag('h1', 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным.', [
//     new Attribute('align', 'Определяет выравнивание заголовка.'),
//   ]),
//   new Tag('span', 'ег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль.', [
//     new Attribute('class', 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.'),
//     new Attribute('contenteditable', 'Сообщает, что элемент доступен для редактирования пользователем.')
//   ]),
//   new Tag('input', 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. ', [
//     new Attribute('alt', 'Альтернативный текст для кнопки с изображением.'),
//     new Attribute('border', 'Толщина рамки вокруг изображения.'),
//     new Attribute('form', 'Связывает поле с формой по её идентификатору.')
//   ]),
//   new Tag('form', 'Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению.', [
//     new Attribute('autocomplete', 'Включает автозаполнение полей формы.'),
//     new Attribute('action', 'Адрес программы или документа, который обрабатывает данные формы.'),
//     new Attribute('novalidate', 'Отменяет встроенную проверку данных формы на корректность ввода.')
//   ]),
//   new Tag('option', 'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.', [
//     new Attribute('selected', 'Заранее устанавливает определенный пункт списка выделенным.'),
//     new Attribute('value', 'Значение пункта списка, которое будет отправлено на сервер или прочитано с помощью скриптов.')
//   ]),
//   new Tag('select', 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Каждый пункт создается с помощью тега <option>, который должен быть вложен в контейнер <select>. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.', [
//     new Attribute('accesskey', 'Позволяет перейти к списку с помощью некоторого сочетания клавиш.'),
//     new Attribute('autofocus', 'Устанавливает, что список получает фокус после загрузки страницы.'),
//     new Attribute('multiple', 'Позволяет одновременно выбирать сразу несколько элементов списка.'),
//     new Attribute('required', 'Список обязателен для выбора перед отправкой формы.')
//   ])
// ]

// console.log(tags);